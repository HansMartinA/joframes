package edu.kit.ipd.pp.joframes.ast.acha;

import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IMethod;
import edu.kit.ipd.pp.joframes.ast.base.Rule;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * Collection of methods generated by the regular expression and super type rules, represented as a rule.
 * Additionally, for all methods, their corresponding framework class is stored.
 *
 * @author Martin Armbruster
 */
public class MethodCollector extends Rule {
	/**
	 * Stores a mapping of framework classes to their methods this object collects.
	 */
	private HashMap<IClass, HashSet<IMethod>> frameworkClassToMethods;

	/**
	 * Creates a new instance.
	 */
	public MethodCollector() {
		frameworkClassToMethods = new HashMap<>();
	}

	/**
	 * Adds a method to the collection.
	 *
	 * @param method the method to add.
	 */
	public void addMethod(final IMethod method) {
		if (!frameworkClassToMethods.containsKey(method.getDeclaringClass())) {
			frameworkClassToMethods.put(method.getDeclaringClass(), new HashSet<>());
		}
		frameworkClassToMethods.get(method.getDeclaringClass()).add(method);
	}

	/**
	 * Adds all methods out of a collection to this collection.
	 *
	 * @param methods the collection with the methods to add.
	 */
	public void addAllMethods(final Collection<IMethod> methods) {
		for (IMethod m : methods) {
			addMethod(m);
		}
	}

	/**
	 * Returns the set of collected methods for a framework classs.
	 *
	 * @param frameworkClass the framework class.
	 * @return the set.
	 */
	public Set<IMethod> getMethodCollection(final IClass frameworkClass) {
		return (Set<IMethod>) frameworkClassToMethods.get(frameworkClass).clone();
	}

	/**
	 * Returns a set with all framework classes of which methods are stored.
	 *
	 * @return the set.
	 */
	public Set<IClass> getFrameworkClasses() {
		return frameworkClassToMethods.keySet();
	}
}
